当某一段代码正在执行的时候，所有后续的任务都必须等待，形成一个任务队列。一旦当前任务执行完毕，再从队列中取出下一个任务，这也常被称为 “阻塞式执行”。

可以理解为：只有在 JS线程中没有任何同步代码要执行的前提下才会执行异步代码

只能保证在指定的时间过后将任务(需要执行的函数)插入队列等候，并不保证这个任务在什么时候执行。
执行javascript的线程会在空闲的时候，自行从队列中取出任务然后执行它

<html>
<body>
Interval 测试页面
<script>
<!-- var timer = 0; -->
function getTimeShow() {
		return new Date().getHours()+":"+new Date().getMinutes()+":"+new Date().getSeconds()+":"+new Date().getMilliseconds();	
}

console.log(getTimeShow(), ': ', 1)
setTimeout(function () {console.log(getTimeShow(), '：a')}, 100);
setTimeout(function () {console.log(getTimeShow(), '：b')}, 0);
var taa = 0;
var saw = setInterval(function () {
	if(taa++ > 10) clearInterval(saw);
	console.log(getTimeShow(),': c');
}, 100);
var sum = 0;
for (var i = 0; i < 1000000; i ++) {
    sum += i;
}
console.log(getTimeShow(), ': ', sum);
var sum1 = 0;
for (var i = 0; i < 1000000; i ++) {
    sum1 += i;
}
console.log(getTimeShow(), ': ', sum1);
var sum2 = 0;
for (var i = 0; i < 1000000; i ++) {
    sum2 += i;
}
console.log(getTimeShow(), ': ', sum2);
var sum3 = 0;
for (var i = 0; i < 1000000; i ++) {
    sum3 += i;
}
console.log(getTimeShow(), ': ', sum3);
var sum4 = 0;
for (var i = 0; i < 1000000; i ++) {
    sum4 += i;
}
console.log(getTimeShow(), ': ', sum4);
var sum5 = 0;
for (var i = 0; i < 1000000; i ++) {
    sum5 += i;
}
console.log(getTimeShow(), ': ', sum5);
var sum6 = 0;
for (var i = 0; i < 1000000; i ++) {
    sum6 += i;
}
console.log(getTimeShow(), ': ', sum6);

</script>
</body>
</html>

转载自https://www.jianshu.com/p/fdbfdbdfaa8c
